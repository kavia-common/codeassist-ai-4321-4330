{"is_source_file": true, "format": "Python", "description": "This file is a test configuration script using pytest for a FastAPI backend. It sets environment variables, provides test fixtures for the app client, mock responses to OpenAI API calls, and a dummy HTTP response class.", "external_files": ["src.api.main"], "external_methods": ["pytest.fixture", "pytest.monkeypatch.setenv", "TestClient"], "published": [], "classes": [{"name": "_DummyHTTPXResponse", "description": "A mock HTTP response class to simulate responses from httpx when testing API calls."}], "methods": [{"name": "_env_setup(monkeypatch)", "description": "Fixture to set environment variables for testing purposes.", "scope": "", "scopeKind": ""}, {"name": "app_client()", "description": "Fixture that initializes a TestClient for the FastAPI app.", "scope": "", "scopeKind": ""}, {"name": "openai_success_response()", "description": "Fixture returning a mock successful response from the OpenAI API.", "scope": "", "scopeKind": ""}, {"name": "openai_error_response()", "description": "Fixture returning a mock error response from OpenAI API.", "scope": "", "scopeKind": ""}, {"name": "_DummyHTTPXResponse.__init__", "description": "Constructor for the mock HTTP response, initializing status code, JSON data, text, and headers."}, {"name": "_DummyHTTPXResponse.json", "description": "Method to return the JSON data or raise an error if not available."}, {"name": "__aenter__(self)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class", "description": "unavailable"}, {"name": "__aexit__(self, exc_type, exc, tb)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class", "description": "unavailable"}, {"name": "__init__(self, *args, **kwargs)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class", "description": "unavailable"}, {"name": "__init__(self, status_code=200, json_data=None, text_data=\"\")", "scope": "_DummyHTTPXResponse", "scopeKind": "class", "description": "unavailable"}, {"name": "headers(self)", "scope": "_DummyHTTPXResponse", "scopeKind": "class", "description": "unavailable"}, {"name": "json(self)", "scope": "_DummyHTTPXResponse", "scopeKind": "class", "description": "unavailable"}, {"name": "mock_openai(monkeypatch, openai_success_response)", "scope": "", "scopeKind": "", "description": "unavailable"}, {"name": "post(self, url, headers=None, json=None)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class", "description": "unavailable"}, {"name": "set_response(resp)", "scope": "mock_openai", "scopeKind": "function", "description": "unavailable"}], "calls": ["pytest.fixture", "monkeypatch.setenv", "TestClient(app)", "httpx.AsyncClient", "monkeypatch.setattr"], "search-terms": ["pytest fixtures", "FastAPI test client", "mock OpenAI responses", "test setup", "backend API testing"], "state": 2, "file_id": 8, "knowledge_revision": 44, "git_revision": "ab8b2ed245cac07d50c7a78a6753c5ef206e75e8", "revision_history": [{"28": ""}, {"36": ""}, {"44": "ab8b2ed245cac07d50c7a78a6753c5ef206e75e8"}], "ctags": [{"_type": "tag", "name": "_DummyAsyncClient", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^    class _DummyAsyncClient:$/", "file": true, "language": "Python", "kind": "class", "scope": "mock_openai", "scopeKind": "function"}, {"_type": "tag", "name": "_DummyHTTPXResponse", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^class _DummyHTTPXResponse:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__aenter__", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^        async def __aenter__(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class"}, {"_type": "tag", "name": "__aexit__", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^        async def __aexit__(self, exc_type, exc, tb):$/", "language": "Python", "kind": "member", "signature": "(self, exc_type, exc, tb)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^        def __init__(self, *args, **kwargs):$/", "language": "Python", "kind": "member", "signature": "(self, *args, **kwargs)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^    def __init__(self, status_code=200, json_data=None, text_data=\"\"):$/", "language": "Python", "kind": "member", "signature": "(self, status_code=200, json_data=None, text_data=\"\")", "scope": "_DummyHTTPXResponse", "scopeKind": "class"}, {"_type": "tag", "name": "_env_setup", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^def _env_setup(monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(monkeypatch)"}, {"_type": "tag", "name": "app_client", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^def app_client():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "headers", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^    def headers(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "_DummyHTTPXResponse", "scopeKind": "class"}, {"_type": "tag", "name": "json", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^    def json(self):$/", "language": "Python", "kind": "member", "signature": "(self)", "scope": "_DummyHTTPXResponse", "scopeKind": "class"}, {"_type": "tag", "name": "mock_openai", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^def mock_openai(monkeypatch, openai_success_response):$/", "language": "Python", "kind": "function", "signature": "(monkeypatch, openai_success_response)"}, {"_type": "tag", "name": "openai_error_response", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^def openai_error_response():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "openai_success_response", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^def openai_success_response():$/", "language": "Python", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "post", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^        async def post(self, url, headers=None, json=None):$/", "language": "Python", "kind": "member", "signature": "(self, url, headers=None, json=None)", "scope": "mock_openai._DummyAsyncClient", "scopeKind": "class"}, {"_type": "tag", "name": "set_response", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/conftest.py", "pattern": "/^    def set_response(resp):$/", "file": true, "language": "Python", "kind": "function", "signature": "(resp)", "scope": "mock_openai", "scopeKind": "function"}], "hash": "eb8330d1c763ce6af1466dd1af630566", "format-version": 4, "code-base-name": "backend_service", "filename": "backend_service/tests/conftest.py"}