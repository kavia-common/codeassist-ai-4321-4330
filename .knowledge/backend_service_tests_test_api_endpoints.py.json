{"is_source_file": true, "format": "Python", "description": "This file contains test cases for API endpoints of a backend service, utilizing pytest and FastAPI's test client. It tests health checks, prompt generation, explanation, debugging endpoints, and error handling scenarios.", "external_files": ["src.api.main"], "external_methods": ["app"], "published": [], "classes": [], "methods": [{"name": "test_health_check(app_client)", "description": "Tests the health check endpoint '/' for a successful response with message 'Healthy'.", "scope": "", "scopeKind": ""}, {"name": "test_generate_success(app_client, mock_openai, openai_success_response)", "description": "Tests the '/generate' endpoint with a valid prompt, expecting a successful response with specific content, model, and token usage.", "scope": "", "scopeKind": ""}, {"name": "test_explain_success(app_client)", "description": "Tests the '/explain' endpoint with a code snippet, verifying a successful response containing content and model.", "scope": "", "scopeKind": ""}, {"name": "test_debug_success(app_client)", "description": "Tests the '/debug' endpoint with code, verifying a successful response containing content and model.", "scope": "", "scopeKind": ""}, {"name": "test_generate_validation_error(app_client)", "description": "Tests the '/generate' endpoint with missing data, expecting a 422 validation error.", "scope": "", "scopeKind": ""}, {"name": "test_explain_validation_error(app_client)", "description": "Tests the '/explain' endpoint with missing data, expecting a 422 validation error.", "scope": "", "scopeKind": ""}, {"name": "test_debug_validation_error(app_client)", "description": "Tests the '/debug' endpoint with missing data, expecting a 422 validation error.", "scope": "", "scopeKind": ""}, {"name": "test_upstream_error_passthrough_as_502(app_client, mock_openai, openai_error_response)", "description": "Simulates an upstream 500 error from OpenAI and checks that the service returns a 502 with appropriate error info.", "scope": "", "scopeKind": ""}, {"name": "test_upstream_invalid_json_returns_502(app_client, mock_openai)", "description": "Mocks a non-JSON upstream response and ensures the service responds with 502 error.", "scope": "", "scopeKind": ""}, {"name": "test_missing_api_key_returns_500(app_client, monkeypatch)", "description": "Unsets the API key environment variable to trigger a 500 error in the openai call, verifying proper error handling.", "scope": "", "scopeKind": ""}], "calls": ["src.api.main.app"], "search-terms": ["test_api_endpoints", "FastAPI", "pytest", "API endpoints", "error handling", "OpenAI mock"], "state": 2, "file_id": 10, "knowledge_revision": 38, "git_revision": "", "revision_history": [{"32": ""}, {"38": ""}], "ctags": [{"_type": "tag", "name": "test_debug_success", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_debug_success(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_debug_validation_error", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_debug_validation_error(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_explain_success", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_explain_success(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_explain_validation_error", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_explain_validation_error(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_generate_success", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_generate_success(app_client, mock_openai, openai_success_response):$/", "language": "Python", "kind": "function", "signature": "(app_client, mock_openai, openai_success_response)"}, {"_type": "tag", "name": "test_generate_validation_error", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_generate_validation_error(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_health_check", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_health_check(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_missing_api_key_returns_500", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_missing_api_key_returns_500(app_client, monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(app_client, monkeypatch)"}, {"_type": "tag", "name": "test_upstream_error_passthrough_as_502", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_upstream_error_passthrough_as_502(app_client, mock_openai, openai_error_response)/", "language": "Python", "kind": "function", "signature": "(app_client, mock_openai, openai_error_response)"}, {"_type": "tag", "name": "test_upstream_invalid_json_returns_502", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_upstream_invalid_json_returns_502(app_client, mock_openai):$/", "language": "Python", "kind": "function", "signature": "(app_client, mock_openai)"}], "hash": "54b2cf9be3c39a4bddeb409eace84c0c", "format-version": 4, "code-base-name": "backend_service", "filename": "backend_service/tests/test_api_endpoints.py"}