{"is_source_file": true, "format": "Python", "description": "This file contains test cases for API endpoints of a backend service, testing health checks, generation, explanation, debugging, validation errors, and error handling scenarios.", "external_files": ["pytest", "tests.conftest"], "external_methods": ["pytest.mark.asyncio", "app_client.get", "app_client.post", "_DummyHTTPXResponse"], "published": [], "classes": [], "methods": [{"name": "test_health_check(app_client)", "description": "Tests the health check endpoint to ensure it returns status 200 and message 'Healthy'.", "scope": "", "scopeKind": ""}, {"name": "test_generate_success(app_client, mock_openai, openai_success_response)", "description": "Tests the '/generate' endpoint with a valid prompt, expecting a successful response with correct content.", "scope": "", "scopeKind": ""}, {"name": "test_explain_success(app_client)", "description": "Tests the '/explain' endpoint with a code snippet, expecting a successful explanation response.", "scope": "", "scopeKind": ""}, {"name": "test_debug_success(app_client)", "description": "Tests the '/debug' endpoint with code, expecting a successful debug response.", "scope": "", "scopeKind": ""}, {"name": "test_generate_validation_error(app_client)", "description": "Tests validation handling when missing prompt in '/generate' request, expecting status 422.", "scope": "", "scopeKind": ""}, {"name": "test_explain_validation_error(app_client)", "description": "Tests validation handling when missing code in '/explain' request, expecting status 422.", "scope": "", "scopeKind": ""}, {"name": "test_debug_validation_error(app_client)", "description": "Tests validation handling when missing code in '/debug' request, expecting status 422.", "scope": "", "scopeKind": ""}, {"name": "test_upstream_error_passthrough_as_502(app_client, mock_openai, openai_error_response)", "description": "Simulates an upstream server error during '/generate' call, expecting a 502 response with error details.", "scope": "", "scopeKind": ""}, {"name": "test_upstream_invalid_json_returns_502(app_client, mock_openai)", "description": "Tests handling of invalid JSON responses from upstream, expecting a 502 error.", "scope": "", "scopeKind": ""}, {"name": "test_missing_api_key_returns_500(app_client, monkeypatch)", "description": "Tests the scenario where the API key is missing, expecting a 500 error.", "scope": "", "scopeKind": ""}], "search-terms": ["test_api_endpoints", "health_check", "generate", "explain", "debug", "validation", "upstream_error", "mock_openai", "pytest", "FastAPI"], "state": 2, "file_id": 10, "knowledge_revision": 45, "git_revision": "ab8b2ed245cac07d50c7a78a6753c5ef206e75e8", "revision_history": [{"32": ""}, {"38": ""}, {"45": "ab8b2ed245cac07d50c7a78a6753c5ef206e75e8"}], "ctags": [{"_type": "tag", "name": "test_debug_success", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_debug_success(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_debug_validation_error", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_debug_validation_error(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_explain_success", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_explain_success(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_explain_validation_error", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_explain_validation_error(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_generate_success", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_generate_success(app_client, mock_openai, openai_success_response):$/", "language": "Python", "kind": "function", "signature": "(app_client, mock_openai, openai_success_response)"}, {"_type": "tag", "name": "test_generate_validation_error", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_generate_validation_error(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_health_check", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^def test_health_check(app_client):$/", "language": "Python", "kind": "function", "signature": "(app_client)"}, {"_type": "tag", "name": "test_missing_api_key_returns_500", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_missing_api_key_returns_500(app_client, monkeypatch):$/", "language": "Python", "kind": "function", "signature": "(app_client, monkeypatch)"}, {"_type": "tag", "name": "test_upstream_error_passthrough_as_502", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_upstream_error_passthrough_as_502(app_client, mock_openai, openai_error_response)/", "language": "Python", "kind": "function", "signature": "(app_client, mock_openai, openai_error_response)"}, {"_type": "tag", "name": "test_upstream_invalid_json_returns_502", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4330/backend_service/tests/test_api_endpoints.py", "pattern": "/^async def test_upstream_invalid_json_returns_502(app_client, mock_openai):$/", "language": "Python", "kind": "function", "signature": "(app_client, mock_openai)"}], "hash": "fd6be03ed9843a47a544bb7139e2222a", "format-version": 4, "code-base-name": "backend_service", "filename": "backend_service/tests/test_api_endpoints.py"}